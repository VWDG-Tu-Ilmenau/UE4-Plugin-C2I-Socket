#pragma warning (disable : 4800) // forcing value to bool true or false 
#pragma warning (disable : 4125) // decimal digit terminates octal escape sequence 
#pragma warning (disable : 4647) // behavior change __is_pod has different value in previous version 
#pragma warning (disable : 4668) // 'symbol' is not defined as a preprocessor macro, replacing with '0' for 'directives' 
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageC2I_to_Dispatcher.proto

#ifndef PROTOBUF_MessageC2I_5fto_5fDispatcher_2eproto__INCLUDED
#define PROTOBUF_MessageC2I_5fto_5fDispatcher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace c2ipb {
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class Call_Event;
class Call_EventDefaultTypeInternal;
extern Call_EventDefaultTypeInternal _Call_Event_default_instance_;
}  // namespace c2ipb

namespace c2ipb {

namespace protobuf_MessageC2I_5fto_5fDispatcher_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_MessageC2I_5fto_5fDispatcher_2eproto

enum Call_Event_EventType {
  Call_Event_EventType_TYPEFLOAT = 0,
  Call_Event_EventType_TYPECALL = 1,
  Call_Event_EventType_TYPEINT = 2,
  Call_Event_EventType_Call_Event_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Call_Event_EventType_Call_Event_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Call_Event_EventType_IsValid(int value);
const Call_Event_EventType Call_Event_EventType_EventType_MIN = Call_Event_EventType_TYPEFLOAT;
const Call_Event_EventType Call_Event_EventType_EventType_MAX = Call_Event_EventType_TYPEINT;
const int Call_Event_EventType_EventType_ARRAYSIZE = Call_Event_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Call_Event_EventType_descriptor();
inline const ::std::string& Call_Event_EventType_Name(Call_Event_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Call_Event_EventType_descriptor(), value);
}
inline bool Call_Event_EventType_Parse(
    const ::std::string& name, Call_Event_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Call_Event_EventType>(
    Call_Event_EventType_descriptor(), name, value);
}
// ===================================================================

class Call_Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2ipb.Call.Event) */ {
 public:
  Call_Event();
  virtual ~Call_Event();

  Call_Event(const Call_Event& from);

  inline Call_Event& operator=(const Call_Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call_Event(Call_Event&& from) noexcept
    : Call_Event() {
    *this = ::std::move(from);
  }

  inline Call_Event& operator=(Call_Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_Event& default_instance();

  enum ValueCase {
    kValInt = 6,
    kValFloat = 7,
    kValString = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const Call_Event* internal_default_instance() {
    return reinterpret_cast<const Call_Event*>(
               &_Call_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Call_Event* other);
  friend void swap(Call_Event& a, Call_Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call_Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Call_Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call_Event& from);
  void MergeFrom(const Call_Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call_Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Call_Event_EventType EventType;
  static const EventType TYPEFLOAT =
    Call_Event_EventType_TYPEFLOAT;
  static const EventType TYPECALL =
    Call_Event_EventType_TYPECALL;
  static const EventType TYPEINT =
    Call_Event_EventType_TYPEINT;
  static inline bool EventType_IsValid(int value) {
    return Call_Event_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    Call_Event_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    Call_Event_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    Call_Event_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return Call_Event_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return Call_Event_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return Call_Event_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string eventName = 4;
  void clear_eventname();
  static const int kEventNameFieldNumber = 4;
  const ::std::string& eventname() const;
  void set_eventname(const ::std::string& value);
  #if LANG_CXX11
  void set_eventname(::std::string&& value);
  #endif
  void set_eventname(const char* value);
  void set_eventname(const char* value, size_t size);
  ::std::string* mutable_eventname();
  ::std::string* release_eventname();
  void set_allocated_eventname(::std::string* eventname);

  // int32 index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // .c2ipb.Call.Event.EventType eventType = 5;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 5;
  ::c2ipb::Call_Event_EventType eventtype() const;
  void set_eventtype(::c2ipb::Call_Event_EventType value);

  // int32 val_int = 6;
  private:
  bool has_val_int() const;
  public:
  void clear_val_int();
  static const int kValIntFieldNumber = 6;
  ::google::protobuf::int32 val_int() const;
  void set_val_int(::google::protobuf::int32 value);

  // float val_float = 7;
  private:
  bool has_val_float() const;
  public:
  void clear_val_float();
  static const int kValFloatFieldNumber = 7;
  float val_float() const;
  void set_val_float(float value);

  // string val_string = 8;
  private:
  bool has_val_string() const;
  public:
  void clear_val_string();
  static const int kValStringFieldNumber = 8;
  const ::std::string& val_string() const;
  void set_val_string(const ::std::string& value);
  #if LANG_CXX11
  void set_val_string(::std::string&& value);
  #endif
  void set_val_string(const char* value);
  void set_val_string(const char* value, size_t size);
  ::std::string* mutable_val_string();
  ::std::string* release_val_string();
  void set_allocated_val_string(::std::string* val_string);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:c2ipb.Call.Event)
 private:
  void set_has_val_int();
  void set_has_val_float();
  void set_has_val_string();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr eventname_;
  ::google::protobuf::int32 index_;
  int eventtype_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int32 val_int_;
    float val_float_;
    ::google::protobuf::internal::ArenaStringPtr val_string_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_MessageC2I_5fto_5fDispatcher_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2ipb.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const PROTOBUF_FINAL { return New(NULL); }

  Call* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Call_Event Event;

  // accessors -------------------------------------------------------

  // string targetComponent = 1;
  void clear_targetcomponent();
  static const int kTargetComponentFieldNumber = 1;
  const ::std::string& targetcomponent() const;
  void set_targetcomponent(const ::std::string& value);
  #if LANG_CXX11
  void set_targetcomponent(::std::string&& value);
  #endif
  void set_targetcomponent(const char* value);
  void set_targetcomponent(const char* value, size_t size);
  ::std::string* mutable_targetcomponent();
  ::std::string* release_targetcomponent();
  void set_allocated_targetcomponent(::std::string* targetcomponent);

  // string targetCommand = 2;
  void clear_targetcommand();
  static const int kTargetCommandFieldNumber = 2;
  const ::std::string& targetcommand() const;
  void set_targetcommand(const ::std::string& value);
  #if LANG_CXX11
  void set_targetcommand(::std::string&& value);
  #endif
  void set_targetcommand(const char* value);
  void set_targetcommand(const char* value, size_t size);
  ::std::string* mutable_targetcommand();
  ::std::string* release_targetcommand();
  void set_allocated_targetcommand(::std::string* targetcommand);

  // .c2ipb.Call.Event event = 9;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 9;
  const ::c2ipb::Call_Event& event() const;
  ::c2ipb::Call_Event* mutable_event();
  ::c2ipb::Call_Event* release_event();
  void set_allocated_event(::c2ipb::Call_Event* event);

  // @@protoc_insertion_point(class_scope:c2ipb.Call)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr targetcomponent_;
  ::google::protobuf::internal::ArenaStringPtr targetcommand_;
  ::c2ipb::Call_Event* event_;
  mutable int _cached_size_;
  friend struct protobuf_MessageC2I_5fto_5fDispatcher_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Call_Event

// int32 index = 3;
inline void Call_Event::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Call_Event::index() const {
  // @@protoc_insertion_point(field_get:c2ipb.Call.Event.index)
  return index_;
}
inline void Call_Event::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:c2ipb.Call.Event.index)
}

// string eventName = 4;
inline void Call_Event::clear_eventname() {
  eventname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call_Event::eventname() const {
  // @@protoc_insertion_point(field_get:c2ipb.Call.Event.eventName)
  return eventname_.GetNoArena();
}
inline void Call_Event::set_eventname(const ::std::string& value) {
  
  eventname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2ipb.Call.Event.eventName)
}
#if LANG_CXX11
inline void Call_Event::set_eventname(::std::string&& value) {
  
  eventname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2ipb.Call.Event.eventName)
}
#endif
inline void Call_Event::set_eventname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eventname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2ipb.Call.Event.eventName)
}
inline void Call_Event::set_eventname(const char* value, size_t size) {
  
  eventname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2ipb.Call.Event.eventName)
}
inline ::std::string* Call_Event::mutable_eventname() {
  
  // @@protoc_insertion_point(field_mutable:c2ipb.Call.Event.eventName)
  return eventname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call_Event::release_eventname() {
  // @@protoc_insertion_point(field_release:c2ipb.Call.Event.eventName)
  
  return eventname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call_Event::set_allocated_eventname(::std::string* eventname) {
  if (eventname != NULL) {
    
  } else {
    
  }
  eventname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventname);
  // @@protoc_insertion_point(field_set_allocated:c2ipb.Call.Event.eventName)
}

// .c2ipb.Call.Event.EventType eventType = 5;
inline void Call_Event::clear_eventtype() {
  eventtype_ = 0;
}
inline ::c2ipb::Call_Event_EventType Call_Event::eventtype() const {
  // @@protoc_insertion_point(field_get:c2ipb.Call.Event.eventType)
  return static_cast< ::c2ipb::Call_Event_EventType >(eventtype_);
}
inline void Call_Event::set_eventtype(::c2ipb::Call_Event_EventType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:c2ipb.Call.Event.eventType)
}

// int32 val_int = 6;
inline bool Call_Event::has_val_int() const {
  return value_case() == kValInt;
}
inline void Call_Event::set_has_val_int() {
  _oneof_case_[0] = kValInt;
}
inline void Call_Event::clear_val_int() {
  if (has_val_int()) {
    value_.val_int_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 Call_Event::val_int() const {
  // @@protoc_insertion_point(field_get:c2ipb.Call.Event.val_int)
  if (has_val_int()) {
    return value_.val_int_;
  }
  return 0;
}
inline void Call_Event::set_val_int(::google::protobuf::int32 value) {
  if (!has_val_int()) {
    clear_value();
    set_has_val_int();
  }
  value_.val_int_ = value;
  // @@protoc_insertion_point(field_set:c2ipb.Call.Event.val_int)
}

// float val_float = 7;
inline bool Call_Event::has_val_float() const {
  return value_case() == kValFloat;
}
inline void Call_Event::set_has_val_float() {
  _oneof_case_[0] = kValFloat;
}
inline void Call_Event::clear_val_float() {
  if (has_val_float()) {
    value_.val_float_ = 0;
    clear_has_value();
  }
}
inline float Call_Event::val_float() const {
  // @@protoc_insertion_point(field_get:c2ipb.Call.Event.val_float)
  if (has_val_float()) {
    return value_.val_float_;
  }
  return 0;
}
inline void Call_Event::set_val_float(float value) {
  if (!has_val_float()) {
    clear_value();
    set_has_val_float();
  }
  value_.val_float_ = value;
  // @@protoc_insertion_point(field_set:c2ipb.Call.Event.val_float)
}

// string val_string = 8;
inline bool Call_Event::has_val_string() const {
  return value_case() == kValString;
}
inline void Call_Event::set_has_val_string() {
  _oneof_case_[0] = kValString;
}
inline void Call_Event::clear_val_string() {
  if (has_val_string()) {
    value_.val_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Call_Event::val_string() const {
  // @@protoc_insertion_point(field_get:c2ipb.Call.Event.val_string)
  if (has_val_string()) {
    return value_.val_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Call_Event::set_val_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:c2ipb.Call.Event.val_string)
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2ipb.Call.Event.val_string)
}
#if LANG_CXX11
inline void Call_Event::set_val_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:c2ipb.Call.Event.val_string)
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2ipb.Call.Event.val_string)
}
#endif
inline void Call_Event::set_val_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2ipb.Call.Event.val_string)
}
inline void Call_Event::set_val_string(const char* value, size_t size) {
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2ipb.Call.Event.val_string)
}
inline ::std::string* Call_Event::mutable_val_string() {
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:c2ipb.Call.Event.val_string)
  return value_.val_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call_Event::release_val_string() {
  // @@protoc_insertion_point(field_release:c2ipb.Call.Event.val_string)
  if (has_val_string()) {
    clear_has_value();
    return value_.val_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Call_Event::set_allocated_val_string(::std::string* val_string) {
  if (!has_val_string()) {
    value_.val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (val_string != NULL) {
    set_has_val_string();
    value_.val_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        val_string);
  }
  // @@protoc_insertion_point(field_set_allocated:c2ipb.Call.Event.val_string)
}

inline bool Call_Event::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Call_Event::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Call_Event::ValueCase Call_Event::value_case() const {
  return Call_Event::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Call

// string targetComponent = 1;
inline void Call::clear_targetcomponent() {
  targetcomponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::targetcomponent() const {
  // @@protoc_insertion_point(field_get:c2ipb.Call.targetComponent)
  return targetcomponent_.GetNoArena();
}
inline void Call::set_targetcomponent(const ::std::string& value) {
  
  targetcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2ipb.Call.targetComponent)
}
#if LANG_CXX11
inline void Call::set_targetcomponent(::std::string&& value) {
  
  targetcomponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2ipb.Call.targetComponent)
}
#endif
inline void Call::set_targetcomponent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  targetcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2ipb.Call.targetComponent)
}
inline void Call::set_targetcomponent(const char* value, size_t size) {
  
  targetcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2ipb.Call.targetComponent)
}
inline ::std::string* Call::mutable_targetcomponent() {
  
  // @@protoc_insertion_point(field_mutable:c2ipb.Call.targetComponent)
  return targetcomponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_targetcomponent() {
  // @@protoc_insertion_point(field_release:c2ipb.Call.targetComponent)
  
  return targetcomponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_targetcomponent(::std::string* targetcomponent) {
  if (targetcomponent != NULL) {
    
  } else {
    
  }
  targetcomponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetcomponent);
  // @@protoc_insertion_point(field_set_allocated:c2ipb.Call.targetComponent)
}

// string targetCommand = 2;
inline void Call::clear_targetcommand() {
  targetcommand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::targetcommand() const {
  // @@protoc_insertion_point(field_get:c2ipb.Call.targetCommand)
  return targetcommand_.GetNoArena();
}
inline void Call::set_targetcommand(const ::std::string& value) {
  
  targetcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2ipb.Call.targetCommand)
}
#if LANG_CXX11
inline void Call::set_targetcommand(::std::string&& value) {
  
  targetcommand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2ipb.Call.targetCommand)
}
#endif
inline void Call::set_targetcommand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  targetcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2ipb.Call.targetCommand)
}
inline void Call::set_targetcommand(const char* value, size_t size) {
  
  targetcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2ipb.Call.targetCommand)
}
inline ::std::string* Call::mutable_targetcommand() {
  
  // @@protoc_insertion_point(field_mutable:c2ipb.Call.targetCommand)
  return targetcommand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_targetcommand() {
  // @@protoc_insertion_point(field_release:c2ipb.Call.targetCommand)
  
  return targetcommand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_targetcommand(::std::string* targetcommand) {
  if (targetcommand != NULL) {
    
  } else {
    
  }
  targetcommand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetcommand);
  // @@protoc_insertion_point(field_set_allocated:c2ipb.Call.targetCommand)
}

// .c2ipb.Call.Event event = 9;
inline bool Call::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
inline void Call::clear_event() {
  if (GetArenaNoVirtual() == NULL && event_ != NULL) delete event_;
  event_ = NULL;
}
inline const ::c2ipb::Call_Event& Call::event() const {
  const ::c2ipb::Call_Event* p = event_;
  // @@protoc_insertion_point(field_get:c2ipb.Call.event)
  return p != NULL ? *p : *reinterpret_cast<const ::c2ipb::Call_Event*>(
      &::c2ipb::_Call_Event_default_instance_);
}
inline ::c2ipb::Call_Event* Call::mutable_event() {
  
  if (event_ == NULL) {
    event_ = new ::c2ipb::Call_Event;
  }
  // @@protoc_insertion_point(field_mutable:c2ipb.Call.event)
  return event_;
}
inline ::c2ipb::Call_Event* Call::release_event() {
  // @@protoc_insertion_point(field_release:c2ipb.Call.event)
  
  ::c2ipb::Call_Event* temp = event_;
  event_ = NULL;
  return temp;
}
inline void Call::set_allocated_event(::c2ipb::Call_Event* event) {
  delete event_;
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:c2ipb.Call.event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace c2ipb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::c2ipb::Call_Event_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c2ipb::Call_Event_EventType>() {
  return ::c2ipb::Call_Event_EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageC2I_5fto_5fDispatcher_2eproto__INCLUDED
